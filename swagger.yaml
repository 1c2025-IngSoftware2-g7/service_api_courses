openapi: 3.0.0
info:
  title: Course API
  version: 1.0.0

tags:
  - name: Health
    description: Health Checkpoints for the service
  - name: Courses
    description: Operations related to courses
  - name: Enrollment
    description: Operations related to enrollment to a course
  - name: Modules & Resources
    description: Operations related to modules and resources
  - name: Favourites
    description: Operations related to favourites courses for student
  - name: Feedback
    description: Operations related to feedback from student to course or professor to student
  - name: Assistants
    description: Operations related to assistant for a course

servers:
  - url: https://34.63.36.12

paths:
  /courses/health:
    get:
      tags:
        - Health
      summary: Health check
      responses:
        '200':
          description: OK

  /courses:
    get:
      tags:
        - Courses
      summary: Get all courses
      responses:
        '200':
          description: A list of courses
    post:
      tags:
        - Courses
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
      responses:
        '201':
          description: Course created

  /courses/{course_id}:
    get:
      tags:
        - Courses
        
      summary: Get a course by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course retrieved
    put:
      tags:
        - Courses
        
      summary: Update a course by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: owner_id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdate'
      responses:
        '200':
          description: Course updated
    delete:
      tags:
        - Courses
      summary: Delete a course by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: owner_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course deleted

  /courses/search:
    get:
      tags:
        - Courses
      summary: Search for a course
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results

  /courses/{course_id}/enroll:
    post:
      tags:
        - Courses
        - Enrollment
      summary: Enroll a student in a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - student_id
              properties:
                student_id:
                  type: string
      responses:
        '200':
          description: Student enrolled

  /courses_owned/{owner_id}:
    get:
      tags:
        - Courses
      summary: Get courses owned by a user
      parameters:
        - name: owner_id
          in: path
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: max_per_page
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of owned courses
          
  /courses/enrolled_courses/{student_id}:
    get:
      tags:
        - Courses
        - Enrollment
        
      summary: Get courses a student is enrolled in
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of enrolled courses

  /courses/{course_id}/approve:
    post:
      tags:
        - Courses
      summary: Approve a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - student_id
              properties:
                student_id:
                  type: string
      responses:
        '200':
          description: Course approved
    
  /courses/{course_id}/modules:
    get: 
      tags: 
        - Modules & Resources
      summary: Get all modules for a course (Including his resources)
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of modules

    post:
      tags:
        - Modules & Resources
        
      summary: Add a module to a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseModule'
      responses:
        '200':
          description: Returns the created module and the id


  /courses/{course_id}/modules/{module_id}:
    get:
      tags:
        - Modules & Resources
        
      summary: Get a module by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Module retrieved
    put:
      tags:
        - Modules & Resources
      summary: Update a module in a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleUpdate'
      responses:
        '200':
          description: Module updated
  
  /courses/{course_id}/modules/{module_id}/{owner_id}:
    delete:
      tags:
        - Modules & Resources
      summary: Delete a module from a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
        - name: owner_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Module deleted

  /courses/{course_id}/modules/{module_id}/resources:
    get:
      tags: 
        - Modules & Resources
      summary: Get all resources for a module
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of resources
    post:
      tags:
        - Modules & Resources
      summary: Add a resource to a module
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - mimetype
                - source
                - id_creator
              properties:
                title:
                  type: string
                mimetype:
                  type: string
                source:
                  type: string
                description:
                  type: string
                id_creator:
                  type: string
      responses:
        '200':
          description: Resource added and returns the id

  /courses/{course_id}/modules/{module_id}/resources/{resource_id}:
    get:
      tags:
        - Modules & Resources
      summary: Get a resource by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource retrieved
  
  /courses/{course_id}/modules/{module_id}/resources/{resource_id}/{owner_id}:
    delete:
      tags:
        - Modules & Resources
      summary: Delete a resource from a module
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: module_id
          in: path
          required: true
          schema:
            type: string
        - name: resource_id
          in: path
          required: true
          schema:
            type: string
        - name: owner_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource deleted

  /courses/paginated:
    get:
      tags:
        - Courses
      summary: Get courses with pagination
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: max_page
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated courses
  
  /courses/favourites/:
    post:
      tags: 
        - Favourites
      summary: Add a course to a student's favourites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteCourseInput'
      responses:
        '200':
          description: Course added to favourites
          
    delete:
      tags: 
        - Favourites
        
      summary: Remove a course from favourites
      parameters:
        - in: query
          name: student_id
          schema:
            type: string
          required: true
        - in: query
          name: course_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Course removed
  
  /courses/favourites/{student_id}:
    get:
      tags: 
        - Favourites
        
      summary: Get all favourite courses for a student
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: offset 
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: max_per_page
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of favourite courses
  
  /courses/favourites/search_favourite_for_id/{student_id}:
    get:
      tags: 
        - Favourites
        
      summary: Search for a specific favourite course by ID paginated (starts from zero)
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: max_per_page
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Course search results as paginated

  /courses/feedback/add_feedback_to_course:
    post:
      tags:
        - Feedback
      summary: Add feedback to a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - feedback
              properties:
                course_id:
                  type: string
                feedback:
                  type: string
      responses:
        '200':
          description: Feedback added
  
  /courses/feedback/get_course_feedback/{course_id}:
    get:
      tags:
        - Feedback
        
      summary: Get feedback for a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feedback retrieved

  /courses/feedback/add_feedback_to_student:
    post:
      tags:
        - Feedback
        
      summary: Add feedback to a student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - teacher_id
                - student_id
                - feedback
              properties:
                course_id:
                  type: string
                teacher_id:
                  type: string
                student_id:
                  type: string
                feedback:
                  type: string
      responses:
        '200':
          description: Feedback added

  /courses/assistants/{course_id}:
    post:
      tags:
        - Assistants
      summary: Add an assistant to a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantPermission'

      responses:
        '200':
          description: Assistant added
        '400':
          description: Missing parameters
        '409':
          description: Assistant already exists
        '403':
          description: User is not the owner of the course
        '404':
          description: Course not found

    put:
      tags:
        - Assistants
      summary: Update an assistant's permissions for a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantPermission'
      responses:
        '200':
          description: Assistant permissions updated
        '400':
          description: Missing parameters
        '403':
          description: User is not the owner of the course
        '404':
          description: Course or assistant not found

  /{course_id}/delete_assistant/{assistant_id}/with_owner_id/{owner_id}:
    delete:
      tags:
        - Assistants
      summary: Remove an assistant from a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: assistant_id
          in: path
          required: true
          schema:
            type: string
        - name: owner_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assistant removed
        '400':
          description: Missing parameters
        '403':
          description: User is not the owner to remove the assistant
        '404':
          description: Course or assistant not found

  /{course_id}/assistant/{assistant_id}:
    get:
      tags:
        - Assistants
      summary: Get an assistant's permissions for a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: assistant_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assistant permissions retrieved
        '400':
          description: Missing parameters
        '403':
          description: User is not the owner of the course
        '404':
          description: Course or assistant not found

  /courses/tasks/:
    post:
      tags:
        - Tasks
      summary: Create a new task or exam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - course_id
                - due_date
              properties:
                title:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
                due_date:
                  type: integer
                course_id:
                  type: string
                module_id:
                  type: string
                status:
                  type: string
                  enum: [inactive, open, closed]
                task_type:
                  type: string
                  enum: [task, exam]
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      url:
                        type: string
                      mimetype:
                        type: string
      responses:
        '201':
          description: Task created successfully
        '400':
          description: Missing required fields or malformed request
        '500':
          description: Internal server error

  /courses/tasks/{task_id}:
    put:
      tags:
        - Tasks
      summary: Update a task or exam
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
                due_date:
                  type: integer
                status:
                  type: string
                task_type:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      url:
                        type: string
                      mimetype:
                        type: string
      responses:
        '200':
          description: Task updated successfully
        '400':
          description: Missing or invalid fields
        '404':
          description: Task not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Tasks
      summary: Delete a task or exam
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
        '400':
          description: Task ID required
        '404':
          description: Task not found
        '500':
          description: Internal server error

    get:
      tags:
        - Tasks
      summary: Get task by ID
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task retrieved successfully
        '400':
          description: Missing task ID
        '404':
          description: Task not found
        '500':
          description: Internal server error

  /courses/tasks/course/{course_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks for a course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: module_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
        '400':
          description: Missing course ID
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /courses/tasks/submission/{uuid_task}:
    post:
      tags:
        - Tasks
      summary: Submit a task or exam
      parameters:
        - name: uuid_task
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - uuid_student
                - attachments
              properties:
                uuid_student:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      url:
                        type: string
                      mimetype:
                        type: string
      responses:
        '200':
          description: Task submitted successfully
        '400':
          description: Missing required fields
        '500':
          description: Internal server error

  /courses/tasks/upload:
    post:
      tags:
        - Tasks
      summary: Upload a task file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - uuid
                - task_number
                - attachment
              properties:
                uuid:
                  type: string
                  format: uuid
                task_number:
                  type: string
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Missing fields in form data
        '422':
          description: Invalid or empty file
        '500':
          description: Internal server error

  /courses/tasks/teachers/{teacher_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks by teacher
      parameters:
        - name: teacher_id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Tasks retrieved successfully
        '400':
          description: Invalid parameters
        '500':
          description: Internal server error

  /courses/tasks/students/{student_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks for a student
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: course_id
          in: query
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Tasks retrieved successfully
        '400':
          description: Invalid parameters
        '500':
          description: Internal server error


  /students/{student_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks for a student
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: course_id
          in: query
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Tasks retrieved successfully
        '400':
          description: Invalid parameters
        '500':
          description: Internal server error

  /submission/{task_id}:
    put:
      tags:
        - Tasks
      summary: Add or update feedback for a task submission
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - uuid_student
              properties:
                uuid_student:
                  type: string
                uuid_corrector:
                  type: string
                grade:
                  type: number
                  format: float
                comment:
                  type: string
      responses:
        '200':
          description: Feedback added/updated successfully
        '400':
          description: Missing required fields
        '403':
          description: User not authorized to provide feedback
        '404':
          description: Task or submission not found
        '500':
          description: Internal server error

  /students/{student_id}/course/{course_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks done by a student for a specific course
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
        '400':
          description: Invalid parameters
        '500':
          description: Internal server error
          
  /open/{course_id}:
    put:
      tags:
        - Courses
      
      summary: open a task for course
      
      parameters:
      
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        
        - name: owner_id
          in: query
          required: true
          schema:
            type: string
            
        - name: start_date
          in: query
          required: true
          schema:
            type: string
        
        - name: end_date
          in: query
          required: true
          schema:
            type: string
        
      responses:
        '403':
          description: User not allowed to open a course
        '404': 
          description: Course not found nor status NOT closed
        '200':
          description: OK
        '500':
          description: Internal Server Error
  
  /close/{course_id}:
    put:
      tags:
        - Courses
      
      summary: Closes a course
      
      parameters:
      
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        
        - name: owner_id
          in: query
          required: true
          schema:
            type: string

      responses:
        '403':
          description: User not allowed to open a course
        '404': 
          description: Course not found nor status NOT open
        '200':
          description: OK
        '500':
          description: Internal Server Error
  
  /get_student_feedback/{student_id}/{course_id}:
    get:
      tags:
        - Feedback
        
      summary: Get feedback for a Student
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: student_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feedback retrieved
        '400':
          description: Missing fields

  /{course_id}/student/{student_id}/approve:
    get:
      tags:
        - Courses
        
      summary: Check if a student approved the course
      
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - name: student_id
          in: path
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: Operation done, its either true or false

components:
  schemas:
    CourseCreate:
      type: object
      required:
        - name
        - description
        - max_students
        - course_start_date
        - course_end_date
        - creator_id
        - creator_name
      properties:
        name:
          type: string
        description:
          type: string
        max_students:
          type: integer
        course_start_date:
          type: string
          format: date
        course_end_date:
          type: string
          format: date
        enroll_date_end:
          type: string
          format: date
          description: Optional end date for enrollment
        creator_id:
          type: string
        creator_name:
          type: string
        correlatives_required_id:
          type: array
          items:
            type: string
          description: List of course IDs that are required as correlatives to enroll in this course

    CourseUpdate:
      type: object
      description: "Anything is optional, but at least one should be sent to make an update"
      properties:
        name:
          type: string
          description: Optional
        description:
          type: string
          description: Optional
        max_students:
          type: integer
          description: Optional
        course_start_date:
          type: string
          format: date
          description: Optional
        course_end_date:
          type: string
          format: date
          description: Optional
        enroll_date_end:
          type: string
          format: date
          description: Optional

    CourseModule:
      type: object
      required:
        - title
        - description
        - id_creator
      properties:
        title:
          type: string
        description:
          type: string
        owner_id:
          type: string

    ModuleUpdate:
      type: object
      properties:
        title:
          type: string
          description: Optional
        description:
          type: string
          description: Optional
        position:
          type: integer
          description: Optional
        modifier_id:
          type: string
          description: Obligatory

    FavouriteCourseInput:
      type: object
      required:
        - student_id
        - course_id
      properties:
        student_id:
          type: string
        course_id:
          type: string

    AssistantPermission:
      type: object
      properties:
        assistant_id:
          type: string
          description: The ID of the assistant
        owner_id:
          type: string
          example: The ID of the course owner
        permissions:
          type: object
          properties:
            ModulesAndResources:
              type: boolean
              description: "Can manage modules and resources"
            Exams:
              type: boolean
              description: "Can manage exams"
            Tasks:
              type: boolean
              description: "Can manage tasks"
            Feedbacks:
              type: boolean
              description: "Can manage feedbacks"

      required:
        - assistant_id
        - owner_id
        - permissions
